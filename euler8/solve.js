dataEuler = Int8Array.from(
        "73167176531330624919225119674426574742355349194934" +
        "96983520312774506326239578318016984801869478851843" +
        "85861560789112949495459501737958331952853208805511" +
        "12540698747158523863050715693290963295227443043557" +
        "66896648950445244523161731856403098711121722383113" +
        "62229893423380308135336276614282806444486645238749" +
        "30358907296290491560440772390713810515859307960866" +
        "70172427121883998797908792274921901699720888093776" +
        "65727333001053367881220235421809751254540594752243" +
        "52584907711670556013604839586446706324415722155397" +
        "53697817977846174064955149290862569321978468622482" +
        "83972241375657056057490261407972968652414535100474" +
        "82166370484403199890008895243450658541227588666881" +
        "16427171479924442928230863465674813919123162824586" +
        "17866458359124566529476545682848912883142607690042" +
        "24219022671055626321111109370544217506941658960408" +
        "07198403850962455444362981230987879927244284909188" +
        "84580156166097919133875499200524063689912560717606" +
        "05886116467109405077541002256983155200055935729725" +
        "71636269561882670428252483600823257530420752963450");


dataGeo = Int8Array.from(
        "1355613664861615395867159118565849988222" +
        "2435499155382748149528243525677359158513" +
        "5925555525915593486625163845335742529177" +
        "4945884992583888713586959353325371285863" +
        "4527556159453136169552656237521466189494" +
        "2926282842422544575657193177254372565384" +
        "7578651555554957846342869631618327939471" +
        "2595118868818488848314826896215291925683" +
        "5225554139985432273982175695464436959365" +
        "2925455741532524859243296535265985915615" +
        "9649558271552149474951751255572354764123" +
        "5454245963359517171758578148483576114941" +
        "5699758963118533235677579777857783145594" +
        "5156736618535351738584345564859533597453" +
        "5284537611494391785624679221657377757736" +
        "1571259726562268981155518851758533754826" +
        "9511456994376567139635293613976279438695" +
        "5855356261247689445415149575755921738873" +
        "1826298656536494892753185475323685575252" +
        "5399655351278753216569725742449242367293" +
        "7916156784439866172694735593169554797637" +
        "3694235551672751627552155766328253287815" +
        "7944714172584449698716665823258253619731" +
        "9589568949115515358487326541185295343755" +
        "1889985528289231857785525477114644633845");


function Logger(msg) {
    self = {}

    solutionDiv = document.getElementById("solution");

    self.header = function(msg) {
        head = document.createElement('h1');
        head.innerText = msg;
        solutionDiv.appendChild(head);
    }

    self.message = function(msg) {
        message = document.createElement('div');
        message.className = "message";
        message.innerText = msg;
        solutionDiv.appendChild(message);
    }

    return self;
}


function MinMax(min, max) {
    this.min = min;
    this.max = max;
}

MinMax.prototype.toString = function() {
    return "Min: " + this.min + "\nMax: " + this.max;
}


log = Logger();


function solve(data, search_span) {
    min = Number.POSITIVE_INFINITY;
    max = Number.NEGATIVE_INFINITY;

    for(i=0; i < data.length - search_span; i++) {
        product = 1;
        for(j = 0; j < search_span; j++) {
            product *= data[i + j];
        }
        min = min < product ? min : product;
        max = max > product ? max : product;
    }
    return new MinMax(min, max);
}


log.header("Test");
log.message("Expected: min = 16, Max = 5184");
log.message(solve(dataGeo, 4));

log.header("Euler project");
log.message(solve(dataEuler, 13));

log.header("Geocaching Euler project");
log.message(solve(dataGeo, 13));
